options {
    LOOKAHEAD = 1;
    CHOICE_AMBIGUITY_CHECK = 3;
    OTHER_AMBIGUITY_CHECK = 2;
    STATIC = false;
    DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
    UNICODE_INPUT = true;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
}

PARSER_BEGIN(com.learn.javacc.rsql.parser.Parser)

import com.learn.javacc.rsql.asm.*;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

final class com.learn.javacc.rsql.parser.Parser {

    private NodeFactory factory;

    public com.learn.javacc.rsql.parser.Parser(InputStream stream, String encoding, NodeFactory factory) {
        this(stream, encoding);
        this.factory = factory;
    }

}

PARSER_END(com.learn.javacc.rsql.parser.Parser)


SKIP :
{
    " "
    | "\t"
    | "\r"
    | "\n"
}

TOKEN :
{
    < #ESCAPED_CHAR : "\\" ~[] >
}

TOKEN :
{
    < UNRESERVED_STR    : ( ~["\"", "'", "(", ")", ";", ",", "=", "<", ">", "!", "~", " "] )+ >
    | < SINGLE_QUOTED_STR : ( "'" ( <ESCAPED_CHAR> | ~["'", "\\"] )* "'" ) >
    | < DOUBLE_QUOTED_STR : ( "\"" ( <ESCAPED_CHAR> | ~["\"", "\\"] )* "\"" ) >
}

TOKEN :
{
    < AND          : ";" >
    | < OR         : "," >
    | < LPAREN     : "(" >
    | < RPAREN     : ")" >
    | < CONDITION  : (( ( "=" (["a"-"z", "A"-"Z"])* ) | "!" ) "=") | (( ">" | "<" ) ( "=" )?) >
}


Node parse() :
{ final Node node; }
{
    node = Or() <EOF>
    { return node; }
}

Node Or() :
{
    final List<Node> nodeList = new ArrayList<Node>(3);
    Node node;
}
{
    node = And() { nodeList.add(node); }
    (
        <OR> node = And() { nodeList.add(node); }
    )*
    { return nodeList.size() != 1 ? factory.createWhereNode(WhereSymbol.OR, nodeList) : nodeList.get(0); }
}

Node And() :
{
    final List<Node> nodeList = new ArrayList<Node>(3);
    Node node;
}
{
    node = Constraint() { nodeList.add(node); }
    (
        <AND> node = Constraint() { nodeList.add(node); }
    )*
    { return nodeList.size() != 1 ? factory.createWhereNode(WhereSymbol.AND, nodeList) : nodeList.get(0); }
}

Node Constraint() :
{ final Node node; }
{
    ( node = Group() | node = Condition() )
    { return node; }
}

Node Group() :
{ final Node node; }
{
    <LPAREN> node = Or() <RPAREN>
    { return node; }
}

ConditionNode Condition() :
{
    final String fieldName;
    final String operate;
    final List<String> value;
}
{
    ( fieldName = Selector() operate = Operator() value = Arguments() )
    { return factory.createComparisonNode(fieldName, operate, value); }
}

String Selector() : {}
{
    token = <UNRESERVED_STR>
    { return token.image; }
}

String Operator() : {}
{
    ( token = <CONDITION> )
    { return token.image; }
}

List<String> Arguments() :
{ final Object value; }
{
    ( <LPAREN> value = ConditionArguments() <RPAREN> ) { return (List) value; }
|
    value = Argument() { return Arrays.asList((String) value); }
}

List<String> ConditionArguments() :
{
    final List<String> list = new ArrayList<String>(3);
    String arg;
}
{
    arg = Argument() { list.add(arg); }
    (
        <OR> arg = Argument() { list.add(arg); }
    )*
    { return list; }
}

String Argument() :
{}
{
    token = <UNRESERVED_STR> { return token.image; }
|
    ( token = <DOUBLE_QUOTED_STR> | token = <SINGLE_QUOTED_STR> ) { return token.image.substring(1, token.image.length() -1); }
}